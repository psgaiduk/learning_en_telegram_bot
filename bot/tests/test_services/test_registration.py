from http import HTTPStatus

from aiohttp import ClientResponse
from pytest import mark
from unittest.mock import AsyncMock, Mock, patch

from settings import settings
from services import RegistrationService


class TestRegistrationService:
    """Tests for RegistrationService."""

    @classmethod
    def setup_class(cls):
        cls._message = Mock()
        cls._message.from_user.id = 12345
        cls._post_method_target = 'context_managers.aio_http_client.AsyncHttpClient.post'

    @mark.asyncio
    async def test_create_user(self, mocker):
        self._message.answer = AsyncMock()
        self._service = RegistrationService(message=self._message)

        with patch(self._post_method_target, return_value=({}, HTTPStatus.CREATED)) as mocked_post:
            await self._service._create_user()

        mocked_post.assert_awaited_once_with(
            url=f'{settings.api_url}/v1/telegram_user/',
            headers=settings.api_headers,
            json={
                'telegram_id': 12345,
                'main_language_id': 1,
                'experience': 0,
                'hero_level_id': 1,
                'previous_stage': '',
                'stage': 'WAIT_NAME',
            }
        )

        self._message.answer.assert_not_called()

    @mark.asyncio
    async def test_create_user_mistake(self):
        self._message.answer = AsyncMock()
        self._service = RegistrationService(message=self._message)

        with patch(self._post_method_target, return_value=({}, HTTPStatus.NOT_FOUND)) as mocked_post:
            await self._service._create_user()

        mocked_post.assert_awaited_once_with(
            url=f'{settings.api_url}/v1/telegram_user/',
            headers=settings.api_headers,
            json={
                'telegram_id': 12345,
                'main_language_id': 1,
                'experience': 0,
                'hero_level_id': 1,
                'previous_stage': '',
                'stage': 'WAIT_NAME',
            }
        )

        self._message.answer.assert_called_once_with(
            'ü§ñ –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, —á—É—Ç—å –ø–æ–∑–∂–µ.'
        )

    @mark.asyncio
    async def test_send_greeting_message(self):
        self._message.answer = AsyncMock()
        self._service = RegistrationService(message=self._message)

        await self._service._send_greeting_message()

        self._message.answer.assert_called_once_with(
            'üëä –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –ö–ª—É–±!\n\n'
            '–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –Ω–∞—á–∞—Ç—å, —Ç—ã –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:\n\n'
            '1Ô∏è‚É£ –ü–µ—Ä–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ –ê–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –ö–ª—É–±–∞: —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤—Å–µ–º –æ–± –ê–Ω–≥–ª–∏–π—Å–∫–æ–º –ö–ª—É–±–µ. '
            f'–û—Ç–ø—Ä–∞–≤—å—Ç–µ https://t.me/{settings.bot_name}?start=rfu –¥—Ä—É–∑—å—è–º, —á—Ç–æ–±—ã –æ–Ω–∏ —Ç–æ–∂–µ –º–æ–≥–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.\n'
            '2Ô∏è‚É£ –í—Ç–æ—Ä–æ–µ –ø—Ä–∞–≤–∏–ª–æ: –ù–ò–ö–û–ì–î–ê –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ –ø–µ—Ä–≤–æ–º –ø—Ä–∞–≤–∏–ª–µ. '
            f'–ö—Å—Ç–∞—Ç–∏ –≤–æ—Ç —Å—Å—ã–ª–∫–∞ https://t.me/{settings.bot_name}?start=rfu, —á—Ç–æ–±—ã —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –≤—Å–µ–º.\n'
            f'3Ô∏è‚É£ –¢—Ä–µ—Ç—å–µ –ø—Ä–∞–≤–∏–ª–æ: –ï—Å–ª–∏ —Ç—ã —Ç—É—Ç, —Ç–æ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –¥–µ–Ω—å.'
        )

    @mark.asyncio
    async def test_send_tasks_today(self):
        self._message.answer = AsyncMock()
        self._service = RegistrationService(message=self._message)

        await self._service._send_tasks_today()

        self._message.answer.assert_called_once_with(
            'üìù –ó–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å:\n\n'
            '1Ô∏è‚É£ –ó–∞–ø–æ–ª–Ω–∏ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ—Ñ–∏–ª—å" –≤–Ω–∏–∑—É —ç–∫—Ä–∞–Ω–∞.\n'
            '2Ô∏è‚É£ –ü—Ä–æ—á–∏—Ç–∞—Ç—å 5 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.\n'
        )

    @mark.asyncio
    async def test_create_referral(self):
        self._message.text = '/start a'
        self._message.answer = AsyncMock()
        self._service = RegistrationService(message=self._message)
        response_mock = AsyncMock(spec=ClientResponse)

        with patch(self._post_method_target, return_value=response_mock) as mocked_post:
            await self._service._create_referral()

        mocked_post.assert_awaited_once_with(
            url=f'{settings.api_url}/v1/referrals/',
            headers=settings.api_headers,
            json={
                'telegram_user_id': 1,
                'friend_telegram_id': 12345,
            }
        )

    @mark.asyncio
    async def test_not_create_referral_without_link(self):
        self._message.text = '/start'
        self._message.answer = AsyncMock()
        self._service = RegistrationService(message=self._message)
        response_mock = AsyncMock(spec=ClientResponse)

        with patch(self._post_method_target, return_value=response_mock) as mocked_post:
            await self._service._create_referral()

        mocked_post.assert_not_called()

    @mark.asyncio
    async def test_not_create_referral_without_link(self):
        self._message.text = '/start 123'
        self._message.answer = AsyncMock()
        self._service = RegistrationService(message=self._message)
        response_mock = AsyncMock(spec=ClientResponse)

        with patch(self._post_method_target, return_value=response_mock) as mocked_post:
            await self._service._create_referral()

        mocked_post.assert_not_called()
